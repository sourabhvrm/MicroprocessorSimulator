import java.awt.JobAttributes;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main_Frame_Sim.java
 *
 * Created on Oct 13, 2016, 7:51:08 PM
 */

/**
 *
 * @author Harsh Kumar Singh
 */
public class Main_Frame_Sim extends javax.swing.JFrame {
    public String[][] LabelAddress = new String[10][2];
    boolean code_correct=true;
    int count_for_once=0;
    /** Creates new form Main_Frame_Sim */
    public Main_Frame_Sim() {
        initComponents();
        AutoCapitalise();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        FlagRegisterTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        RegisterTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        ConverterTable = new javax.swing.JTable();
        ConvertNoButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jInternalFrame5 = new javax.swing.JInternalFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        MemoryTable = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jInternalFrame6 = new javax.swing.JInternalFrame();
        CompileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Editor = new javax.swing.JTextPane();
        RunButton = new javax.swing.JButton();
        RButtonAll = new javax.swing.JRadioButton();
        RButtonOne = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Menu_New = new javax.swing.JMenuItem();
        Menu_Save = new javax.swing.JMenuItem();
        Menu_Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("8085 Simulator");
        setBounds(new java.awt.Rectangle(50, 50, 1450, 700));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jInternalFrame4.setTitle("Registers");
        jInternalFrame4.setVisible(true);

        FlagRegisterTable.setBackground(new java.awt.Color(126, 213, 255));
        FlagRegisterTable.setForeground(new java.awt.Color(0, 51, 51));
        FlagRegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Flag", "00", "0", "0", "0", "0", "0", "0", "0", "0"}
            },
            new String [] {
                "Register", "Value", "S", "Z", "*", "AC", "*", "P", "*", "CY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FlagRegisterTable.setAutoscrolls(false);
        FlagRegisterTable.setGridColor(new java.awt.Color(102, 102, 102));
        FlagRegisterTable.setRowSelectionAllowed(false);
        FlagRegisterTable.getTableHeader().setResizingAllowed(false);
        FlagRegisterTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(FlagRegisterTable);

        RegisterTable.setBackground(new java.awt.Color(204, 255, 204));
        RegisterTable.setForeground(new java.awt.Color(0, 51, 51));
        RegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"ACC", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg B", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg C", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg D", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg E", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg H", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Reg L", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"Memory", "0", "0", "0", "0", "0", "0", "0", "0", "0"}
            },
            new String [] {
                "Register", "Value", "7", "6", "5", "4", "3", "2", "1", "0"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RegisterTable.setToolTipText("CPU's Registers");
        RegisterTable.setAutoscrolls(false);
        RegisterTable.setGridColor(new java.awt.Color(102, 102, 102));
        RegisterTable.setRowSelectionAllowed(false);
        RegisterTable.getTableHeader().setResizingAllowed(false);
        RegisterTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(RegisterTable);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("No. Converter Tool"));
        jPanel3.setToolTipText("Difficulty in Converying Numbers.Ask Me!");

        ConverterTable.setBackground(new java.awt.Color(126, 213, 255));
        ConverterTable.setForeground(new java.awt.Color(0, 51, 51));
        ConverterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Binary", "Decimal", "HexaDecimal"
            }
        ));
        ConverterTable.setToolTipText("Difficulty in Converting Numbers.Ask Me!");
        ConverterTable.setRowSelectionAllowed(false);
        ConverterTable.getTableHeader().setResizingAllowed(false);
        ConverterTable.getTableHeader().setReorderingAllowed(false);
        ConverterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConverterTableMouseClicked(evt);
            }
        });
        ConverterTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ConverterTableKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ConverterTableKeyTyped(evt);
            }
        });
        jScrollPane10.setViewportView(ConverterTable);
        if (ConverterTable.getColumnModel().getColumnCount() > 0) {
            ConverterTable.getColumnModel().getColumn(0).setResizable(false);
            ConverterTable.getColumnModel().getColumn(1).setResizable(false);
            ConverterTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ConvertNoButton.setText("Convert");
        ConvertNoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertNoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jInternalFrame4Layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(ConvertNoButton)))
                .addContainerGap())
            .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrame4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ConvertNoButton)
                .addContainerGap(238, Short.MAX_VALUE))
            .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrame4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(485, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame4)
        );

        jTabbedPane1.addTab("Registers", jPanel5);

        jPanel4.setPreferredSize(new java.awt.Dimension(544, 728));

        jInternalFrame5.setTitle("Memory");
        jInternalFrame5.setPreferredSize(new java.awt.Dimension(544, 728));
        jInternalFrame5.setVisible(true);

        MemoryTable.setBackground(new java.awt.Color(255, 255, 153));
        MemoryTable.setForeground(new java.awt.Color(0, 0, 255));
        MemoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Memory Address", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MemoryTable.setToolTipText("Data Stored In Memory");
        MemoryTable.setRowSelectionAllowed(false);
        MemoryTable.getTableHeader().setResizingAllowed(false);
        MemoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(MemoryTable);

        javax.swing.GroupLayout jInternalFrame5Layout = new javax.swing.GroupLayout(jInternalFrame5.getContentPane());
        jInternalFrame5.getContentPane().setLayout(jInternalFrame5Layout);
        jInternalFrame5Layout.setHorizontalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
        );
        jInternalFrame5Layout.setVerticalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame5Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jInternalFrame5, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Memory", jPanel4);

        jPanel1.setPreferredSize(new java.awt.Dimension(544, 700));

        jInternalFrame6.setTitle("Assembly Language Editor");
        jInternalFrame6.setPreferredSize(new java.awt.Dimension(544, 700));
        jInternalFrame6.setVisible(true);

        CompileButton.setText("Compile");
        CompileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompileButtonActionPerformed(evt);
            }
        });

        Editor.setBackground(new java.awt.Color(234, 255, 241));
        Editor.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        Editor.setForeground(new java.awt.Color(51, 0, 51));
        Editor.setToolTipText("Type Your Assembly Code Here");
        Editor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                EditorKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(Editor);

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        RButtonAll.setBackground(new java.awt.Color(213, 247, 247));
        buttonGroup1.add(RButtonAll);
        RButtonAll.setText("All At Once");
        RButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButtonAllActionPerformed(evt);
            }
        });

        RButtonOne.setBackground(new java.awt.Color(213, 247, 247));
        buttonGroup1.add(RButtonOne);
        RButtonOne.setText("One By One");

        javax.swing.GroupLayout jInternalFrame6Layout = new javax.swing.GroupLayout(jInternalFrame6.getContentPane());
        jInternalFrame6.getContentPane().setLayout(jInternalFrame6Layout);
        jInternalFrame6Layout.setHorizontalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame6Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(CompileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RButtonOne)
                    .addComponent(RButtonAll))
                .addGap(43, 43, 43)
                .addComponent(RunButton)
                .addGap(119, 119, 119))
        );
        jInternalFrame6Layout.setVerticalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CompileButton)
                        .addComponent(RunButton))
                    .addGroup(jInternalFrame6Layout.createSequentialGroup()
                        .addComponent(RButtonAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RButtonOne)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame6, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Editor", jPanel1);

        jMenu1.setText("File");

        Menu_New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        Menu_New.setText("New");
        Menu_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_NewActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_New);

        Menu_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Menu_Save.setText("Save");
        jMenu1.add(Menu_Save);

        Menu_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Menu_Exit.setText("Exit");
        Menu_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Load Program");

        jMenuItem1.setText("8 bit Addition");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, 0, 0, Short.MAX_VALUE)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseWheelMoved
    private void Menu_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_Menu_ExitActionPerformed
    private void Menu_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_NewActionPerformed
            Editor.setText("");
            count_for_once=0;
    }//GEN-LAST:event_Menu_NewActionPerformed
    private void ConverterTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConverterTableKeyTyped

    }//GEN-LAST:event_ConverterTableKeyTyped
    private void ConverterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConverterTableMouseClicked
    }//GEN-LAST:event_ConverterTableMouseClicked
    private void ConverterTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConverterTableKeyPressed
    }//GEN-LAST:event_ConverterTableKeyPressed
    private void ConvertNoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertNoButtonActionPerformed
        try{
            DefaultTableModel dModel=(DefaultTableModel) ConverterTable.getModel();
            //System.out.println((String) dModel.getValueAt(0, 0));
        int ColnoSelected=ConverterTable.getSelectedColumn();
        switch(ColnoSelected){
            case 0:
                String Binary=""+dModel.getValueAt(0, 0);
                dModel.setValueAt(Integer.parseInt(Binary,2), 0, 1);
                dModel.setValueAt(Integer.toHexString(Integer.parseInt(Binary, 2)), 0,2);
                break;
            case 1:
                String Decimal=""+dModel.getValueAt(0, 1);
                dModel.setValueAt(Integer.toBinaryString(Integer.parseInt(Decimal)), 0, 0);
                dModel.setValueAt(Integer.toHexString(Integer.parseInt(Decimal)), 0, 2);
                break;
            case 2:
                String hexString=""+dModel.getValueAt(0, 2);
                dModel.setValueAt(Integer.toBinaryString(Integer.parseInt(hexString, 16)), 0, 0);
                dModel.setValueAt(Integer.parseInt(hexString,16), 0, 1);
                break;
            default:
                JOptionPane.showMessageDialog(null,"Please Select any no. For Converting");
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_ConvertNoButtonActionPerformed

    private void EditorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EditorKeyTyped
}//GEN-LAST:event_EditorKeyTyped

    private void CompileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompileButtonActionPerformed
        try{
            File FilePath=new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\InstructionData.dat");
            String splitCode[] = Editor.getText().split("\\r?\\n");
            for(int i=0,j=0;i<splitCode.length;i++){
                Scanner InstructionFile=new Scanner(FilePath);
                InstructionFile.nextLine();
                String EditorLine[]=splitCode[i].split("\\s+");
                String[] Label=EditorLine[0].split(":");
                for(int k=0;k<Label.length;k++){
                }
                boolean cmd_check=false;
                if(Label[0].equals("LABEL")){
                    LabelAddress[j][0]=Label[1];
                    LabelAddress[j][1]=String.valueOf(i);
                    cmd_check=true;
                    j++;
                }
                else{
                    while(InstructionFile.hasNextLine()){
                        String InstFileCurLine[]=InstructionFile.nextLine().split("\\s+");
                        if(EditorLine[0].equals(InstFileCurLine[0])){
                            cmd_check=true;
                            break;
                        }
                    }
                }
                if(!cmd_check){
                    JOptionPane.showMessageDialog(this,EditorLine[0]+" is not Recognised as a valid Command", "Error in Processing Command", JOptionPane.ERROR_MESSAGE);
                    code_correct=false;
                    break;
                }
            }
        }
        catch(FileNotFoundException e){
            JOptionPane.showMessageDialog(this,e,"Cannot Read File\n",JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,"From Compile "+e);
        }
}//GEN-LAST:event_CompileButtonActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        UpdateMemoryTable();
        RButtonAll.setSelected(true);
        Editor.setFocusable(true);
    }//GEN-LAST:event_formWindowActivated

    private void RButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButtonAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RButtonAllActionPerformed
    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        CompileButtonActionPerformed(evt);
        File FilePath=new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\InstructionData.dat");
        String splitCode[] = Editor.getText().split("\\r?\\n");
        if(code_correct){
            try{
                if(RButtonAll.isSelected()){
                    for(int i=0;i<splitCode.length;i++){
                        Scanner InstructionFile=new Scanner(FilePath);
                        InstructionFile.nextLine();
                        String EditorLine[]=splitCode[i].split("\\s+");
                        while(InstructionFile.hasNextLine()){
                            String InstFileCurLine[]=InstructionFile.nextLine().split("\\s+");
                            if(EditorLine[0].equals(InstFileCurLine[0])){
                                i=ExecuteCommand(EditorLine,InstFileCurLine,i);
                                break;
                            }
                        }
                    }
                }
                else if(RButtonOne.isSelected()){
                    if(count_for_once<splitCode.length){
                        Scanner InstructionFile=new Scanner(FilePath);
                        InstructionFile.nextLine();
                        String EditorLine[]=splitCode[count_for_once].split("\\s+");
                        while(InstructionFile.hasNextLine()){
                            String InstFileCurLine[]=InstructionFile.nextLine().split("\\s+");
                            if(EditorLine[0].equals(InstFileCurLine[0])){
                                count_for_once=ExecuteCommand(EditorLine,InstFileCurLine,count_for_once);
                                break;
                            }
                        }
                        count_for_once++;
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Code Execution Completed", "Complete", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this,"From Run Button"+e,"Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_RunButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            Scanner additionFile=new Scanner(new File("C:\\Users\\Harsh Kumar Singh\\Desktop\\8085\\BUBBLE_SORT.txt"));
            String Data="";
            while(additionFile.hasNext()){
                Data+=additionFile.nextLine()+"\n";
            }
            Editor.setText(Data);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(Main_Frame_Sim.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Cannot Read File", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    public void AutoCapitalise(){
        Editor.addKeyListener(new KeyAdapter() {
            @Override
  public void keyTyped(KeyEvent e) {
    char keyChar = e.getKeyChar();
    if (Character.isLowerCase(keyChar)) {
      e.setKeyChar(Character.toUpperCase(keyChar));
    }
  }
});
    }
    public void InsertToReg(Register Reg,char[] regdata,String hexString){
        try{
            DefaultTableModel tModel=(DefaultTableModel)RegisterTable.getModel();
            switch(Reg){
                case ACC:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],0 ,i+2);
                    }
                    tModel.setValueAt(hexString, 0, 1);
                    break;
                case REGB:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],1 ,i+2);
                    }
                    tModel.setValueAt(hexString, 1, 1);
                    break;
                case REGC:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],2 ,i+2);
                    }
                    tModel.setValueAt(hexString, 2, 1);
                    break;
                case REGD:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],3 ,i+2);
                    }
                    tModel.setValueAt(hexString, 3, 1);
                    break;
                case REGE:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],4 ,i+2);
                    }
                    tModel.setValueAt(hexString, 4, 1);
                    break;
                case REGH:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],5 ,i+2);
                    }
                    tModel.setValueAt(hexString, 5, 1);
                    break;
                case REGL:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],6 ,i+2);
                    }
                    tModel.setValueAt(hexString, 6, 1);
                    break;
                case MEMORY:
                    for(int i=0;i<regdata.length;i++){
                        tModel.setValueAt(regdata[i],7 ,i+2);
                    }
                    tModel.setValueAt(hexString, 7, 1);
                    break;
                }
            }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,"from insert"+e);
        }
    }
    public String GetDataFromReg(Register Reg){
        String data="";
        DefaultTableModel RegTable=(DefaultTableModel)RegisterTable.getModel();
        switch(Reg){
            case ACC:
                    data=(String) RegTable.getValueAt(0, 1);
                    break;
                case REGB:
                    data=(String) RegTable.getValueAt(1, 1);
                    break;
                case REGC:
                    data=(String) RegTable.getValueAt(2, 1);
                    break;
                case REGD:
                    data=(String) RegTable.getValueAt(3, 1);
                    break;
                case REGE:
                    data=(String) RegTable.getValueAt(4, 1);
                    break;
                case REGH:
                    data=(String) RegTable.getValueAt(5, 1);
                    break;
                case REGL:
                    data=(String) RegTable.getValueAt(6, 1);
                    break;
                case MEMORY:
                    data=(String) RegTable.getValueAt(7, 1);
                    break;
        }
        return data;
    }
    public Register CheckRegister(String strReg){
        if(strReg.equals("ACC")){
            return Register.ACC;
        }
        if(strReg.equals("B")){
            return Register.REGB;
        }
        if(strReg.equals("C")){
            return Register.REGC;
        }
        if(strReg.equals("D")){
            return Register.REGD;
        }
        if(strReg.equals("E")){
            return Register.REGE;
        }
        if(strReg.equals("H")){
            return Register.REGH;
        }
        if(strReg.equals("L")){
            return Register.REGL;
        }
        /*if(strReg.equals("REGFLAG")){
            return Register.REGFLAG;
        }*/
        return null;
    }
    public void UpdateFlagData(String regData,char signflag,char cf){
        try{
            char[] flagData=("00000000").toCharArray();
            boolean zero=true;
            for(int i=regData.length();i<8;i++){
                regData="0"+regData;
            }
            if(cf=='1'){
                flagData[7]='1';
            }
            int parity=0;
            for(int i=0;i<regData.length();i++){
                if(regData.charAt(i)=='1'){
                    parity++;
                }
                if(regData.charAt(i)=='1'){
                    zero=false;
                }
            }
            if(parity%2==0){
                flagData[5]='1';
            }
            if(zero){
                flagData[1]='1';
            }
            if(signflag=='1'){
                flagData[0]='1';
            }
            InsertToFlag(flagData);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "From Update Flag"+e);
        }
    }
    public char[] HextoBinary(String hexString){
        char[] bitdata=new char[8];
        for(int i=0;i<bitdata.length;i++){
            bitdata[i]='0';
        }
        String bin=Integer.toBinaryString(Integer.parseInt(hexString, 16));
        for(int i=0;i<bin.length();i++){
            int index=8-bin.length()+i;
            if(bin.charAt(i)=='1'){
                bitdata[index]='1';
            }
        }
        return bitdata;
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frame_Sim().setVisible(true);
            }
        });
    }
    public void UpdateMemoryTable(){
        try {
            Scanner MemFile = new Scanner(new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\MemoryData.dat"));
            DefaultTableModel MemTable=(DefaultTableModel) MemoryTable.getModel();
            int row_count=MemTable.getRowCount();
            for(int i=0;MemFile.hasNextLine();i++){
                String substr[]=MemFile.nextLine().split("\\s+");
                if(i<row_count){
                    MemTable.setValueAt(substr[0], i, 0);
                    MemTable.setValueAt(substr[1], i, 1);
                }
                else{
                    MemTable.addRow(substr);
                }
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            //Logger.getLogger(Main_Frame_Sim.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public String SearchInMemory(String Address){
        DefaultTableModel MemTable=(DefaultTableModel)MemoryTable.getModel();
        for(int i=0;i<MemTable.getRowCount();i++){
            if(Address.equals(MemTable.getValueAt(i, 0))){
                return (String) MemTable.getValueAt(i, 1);
            }
        }
        return null;
    }
    public int ExecuteCommand(String[] InputCodeLine,String[] InstDataLine,int i){
        try{
            if(InstDataLine[1].equals("COPY")){
                if(InstDataLine[2].equals("REG")){
                    CopyRegRegReg(InputCodeLine,InstDataLine);
                }
                else if(InstDataLine[2].equals("ADDRESS")){
                    CopyAddressReg(InputCodeLine,InstDataLine);
                }
                else if(InstDataLine[2].equals("DATA")){
                    CopyDataReg(InputCodeLine,InstDataLine);
                }
            }
            else if(InstDataLine[1].equals("ARITHMETIC")){
                ArithmeticOperations(InputCodeLine);
            }
            else if(InstDataLine[1].equals("LOGICAL")){
                LogicalOperations(InputCodeLine);
            }
            else if(InstDataLine[1].equals("BRANCH")){
                i=BranchOperations(InputCodeLine,i);
                System.out.println(i);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,"From Execute"+ e);
        }
        return i;
    }
    public void CopyRegRegReg(String InputCodeLine[],String InstDataLine[]){
        String[] Reg=InputCodeLine[1].split(",");
        String InstSourceReg=InstDataLine[3];
        String InstDestReg=InstDataLine[4];
        String Data="";
        if(InstSourceReg.equals("USER")){
            if(Reg.length==1){
                Data=GetDataFromReg(CheckRegister(Reg[0]));
            }
            else if(Reg.length==2){
                if(Reg[1].equals("M")){
                    String Address="";
                    Address=GetDataFromReg(Register.REGH);
                    Address+=GetDataFromReg(Register.REGL);
                    Data=SearchInMemory(Address);
                }
                else{
                    Data=GetDataFromReg(CheckRegister(Reg[1]));
                }
            }
        }
        else{
            Data=GetDataFromReg(CheckRegister(InstSourceReg)); 
        }
        if(InstDestReg.equals("USER")){
            if(Reg[0].equals("M")){
                String Address="";
                Address=GetDataFromReg(Register.REGH);
                Address+=GetDataFromReg(Register.REGL);
                UpdateMemoryFile(Address, Data);
            }
            else{
                InsertToReg(CheckRegister(Reg[0]), HextoBinary(Data), Data);
            }
        }
        else{
            InsertToReg(CheckRegister(InstDataLine[4]), HextoBinary(Data), Data);
        }
    }
    public void CopyAddressReg(String InputCodeLine[],String InstDataLine[]){
        String Address=InputCodeLine[1];
        String Data[]=new String[2];
        String DestRegArray[]=InstDataLine[4].split(",");
        String SourceReg[]=InstDataLine[3].split(",");
        if(SourceReg[0].equals("RAM")){
            Data[0]=SearchInMemory(Address);
        }
        else{
            Data[0]=GetDataFromReg(CheckRegister(SourceReg[0]));
            if(SourceReg.length==2){
                Data[1]=GetDataFromReg(CheckRegister(SourceReg[1]));
            }
        }
        if(DestRegArray[0].equals("RAM")){
            UpdateMemoryFile(Address, Data[0]);
            if(SourceReg.length==2){
                Address=Integer.toHexString((Integer.parseInt(Address,16)+1)).toUpperCase();
                UpdateMemoryFile(Address, Data[1]);
            }
        }
        else{
            InsertToReg(CheckRegister(DestRegArray[0]), HextoBinary(Data[0]), Data[0]);
            if(DestRegArray.length==2){
                Data[1]=SearchInMemory(Integer.toHexString((Integer.parseInt(Address,16)+1)).toUpperCase());
                InsertToReg(CheckRegister(DestRegArray[1]), HextoBinary(Data[1]), Data[1]);
            }
        }
    }
    public void CopyDataReg(String InputCodeLine[],String InstDataLine[]){
        String Data=InputCodeLine[1].split(",")[1];
        String DestReg=InputCodeLine[1].split(",")[0];
        InsertToReg(CheckRegister(DestReg),HextoBinary(Data.substring(0, 2)),Data.substring(0, 2));
        if(InstDataLine[4].split(",").length==2){
            if(DestReg.equals("B")){
                InsertToReg(Register.REGC,HextoBinary(Data.substring(2, 4)),Data.substring(2, 4));
            }
            else if(DestReg.equals("D")){
                InsertToReg(Register.REGE,HextoBinary(Data.substring(2, 4)),Data.substring(2, 4));
            }
            else if(DestReg.equals("H")){
                InsertToReg(Register.REGH, HextoBinary(Data.substring(0,2)), Data.substring(0,2));
                InsertToReg(Register.REGL,HextoBinary(Data.substring(2, 4)),Data.substring(2, 4));
            }
        }
    }
    public void UpdateMemoryFile(String Address,String Data){
        try{
            Scanner MemFile = new Scanner(new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\MemoryData.dat"));
            int linecount=0;
            while(MemFile.hasNextLine()){
                linecount++;
                MemFile.nextLine();
            }
            String[] MemFileData=new String[linecount];
            String UpdatedMemFileData="";
            boolean flag=true;
            MemFile = new Scanner(new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\MemoryData.dat"));
            for(int i=0;MemFile.hasNextLine();i++){
                MemFileData[i]=MemFile.nextLine();
                if(MemFileData[i].split("\\s+")[0].equals(Address)){
                    MemFileData[i]=Address+" "+Data;
                    flag=false;
                }
                UpdatedMemFileData+=MemFileData[i]+"\n";
            }
            if(flag){
                UpdatedMemFileData+=Address+" "+Data+"\n";
            }
            MemFile.close();
            byte[] content=UpdatedMemFileData.getBytes();
            FileOutputStream MemFile_Copy=new FileOutputStream(new File("C:\\Users\\Harsh Kumar Singh\\Documents\\NetBeansProjects\\Simulator_8085\\src\\MemoryData.dat"));
            MemFile_Copy.write(content);
            MemFile_Copy.close();
            UpdateMemoryTable();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }
    public void ArithmeticOperations(String[] InputCodeLine){
        if(InputCodeLine[0].equals("ADD")){
            String Data="",AccData="",Result="";
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            AccData=GetDataFromReg(Register.ACC);
            int add=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            Result=Integer.toBinaryString(add);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,'0','1');
            }
            else{
                UpdateFlagData(Result,'0','0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("ADC")){
            DefaultTableModel flagModel=(DefaultTableModel)FlagRegisterTable.getModel();
            String cf=flagModel.getValueAt(0, 9).toString();
            String Data="",AccData="",Result="";
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            AccData=GetDataFromReg(Register.ACC);
            int add=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            if(cf.equals("1")){
                add++;
            }
            Result=Integer.toBinaryString(add);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,'0','1');
            }
            else{
                UpdateFlagData(Result,'0','0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("ADI")){
            String Data="",AccData="",Result="";
            Data=InputCodeLine[1];
            AccData=GetDataFromReg(Register.ACC);
            int add=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            Result=Integer.toBinaryString(add);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,'0','1');
            }
            else{
                UpdateFlagData(Result,'0','0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("ACI")){
            DefaultTableModel flagModel=(DefaultTableModel)FlagRegisterTable.getModel();
            String cf=(String)flagModel.getValueAt(0, 9).toString();
            String Data="",AccData="",Result="";
            Data=InputCodeLine[1];
            AccData=GetDataFromReg(Register.ACC);
            int add=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            if(cf.equals("1")){
                add++;
            }
            Result=Integer.toBinaryString(add);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,'0','1');
            }
            else{
                UpdateFlagData(Result,'0','0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("DAD")){
            String HLData="",RegData="",Data="";
            char[] Result="0000".toCharArray();
            if(InputCodeLine[1].equals("B")){
                RegData=GetDataFromReg(Register.REGB);
                RegData+=GetDataFromReg(Register.REGC);
            }
            else if(InputCodeLine[1].equals("D")){
                RegData=GetDataFromReg(Register.REGD);
                RegData+=GetDataFromReg(Register.REGE);
            }
            HLData=GetDataFromReg(Register.REGH);
            HLData=GetDataFromReg(Register.REGL);
            int data=Integer.parseInt(RegData, 16)+Integer.parseInt(RegData, 16);
            if(data>65535){
                DefaultTableModel flagTable=(DefaultTableModel)FlagRegisterTable.getModel();
                flagTable.setValueAt('1', 0, 9);
                data=data-65535;
            }
            Data=Integer.toHexString(data).toUpperCase();
            for(int i=0;i<Data.length();i++){
                Result[3-i]=Data.charAt(Data.length()-i-1);
            }
            Data=String.valueOf(Result);
            InsertToReg(Register.REGH, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
            InsertToReg(Register.REGL, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
        }
        else if(InputCodeLine[0].equals("SUB")){
            String Data="",AccData="",Result="";
            char sf='0';
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            AccData=GetDataFromReg(Register.ACC);
            int sub=Integer.parseInt(Data, 16)-Integer.parseInt(AccData, 16);
            if(sub<0){
                sf='1';
            }
            Result=Integer.toBinaryString(sub);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,sf,'1');
            }
            else{
                UpdateFlagData(Result,sf,'0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("SBB")){
            DefaultTableModel flagModel=(DefaultTableModel)FlagRegisterTable.getModel();
            String cf=(String)flagModel.getValueAt(0, 9).toString();
            String Data="",AccData="",Result="";
            char sf='0';
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            AccData=GetDataFromReg(Register.ACC);
            int sub=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            if(cf.equals("1")){
                sub--;
            }
            if(sub<0){
                sf='1';
            }
            Result=Integer.toBinaryString(sub);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,sf,'1');
            }
            else{
                UpdateFlagData(Result,sf,'0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("SUI")){
            String Data="",AccData="",Result="";
            char sf='0';
            Data=InputCodeLine[1];
            AccData=GetDataFromReg(Register.ACC);
            int sub=Integer.parseInt(Data, 16)-Integer.parseInt(AccData, 16);
            if(sub<0){
                sf='1';
            }
            Result=Integer.toBinaryString(sub);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,sf,'1');
            }
            else{
                UpdateFlagData(Result,sf,'0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("SBI")){
            DefaultTableModel flagModel=(DefaultTableModel)FlagRegisterTable.getModel();
            String cf=(String)flagModel.getValueAt(0, 9).toString();
            String Data="",AccData="",Result="";
            char sf='0';
            Data=InputCodeLine[1];
            AccData=GetDataFromReg(Register.ACC);
            int sub=Integer.parseInt(Data, 16)+Integer.parseInt(AccData, 16);
            if(cf.equals("1")){
                sub--;
            }
            if(sub<0){
                sf='1';
            }
            Result=Integer.toBinaryString(sub);
            if(Result.length()==9){
                Result=Result.substring(1);
                UpdateFlagData(Result,sf,'1');
            }
            else{
                UpdateFlagData(Result,sf,'0');
            }
            Result=Integer.toHexString(Integer.parseInt(Result, 2)).toUpperCase();
            InsertToReg(Register.ACC, HextoBinary(Result), Result);
        }
        else if(InputCodeLine[0].equals("INR")){
            String Data="";
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            Data=Integer.toHexString(Integer.parseInt(Data, 16)+1).toUpperCase();
            if(InputCodeLine[1].equals("M")){
                String Address=GetDataFromReg(Register.REGH);
                Address=Address+GetDataFromReg(Register.REGL);
                UpdateMemoryFile(Address, Data);
            }
            else{
                InsertToReg(CheckRegister(InputCodeLine[1]), HextoBinary(Data), Data);
            }
        }
        else if(InputCodeLine[0].equals("DCR")){
            String Data="";
            if(InputCodeLine[1].equals("M")){
                Data=GetDataFromMemoryHL();
            }
            else{
                Data=GetDataFromReg(CheckRegister(InputCodeLine[1]));
            }
            int data=Integer.parseInt(Data,16);
            data--;
            if(data<0)data=0;
            Data=Integer.toHexString(data).toUpperCase();
            System.out.println(1);
            if(InputCodeLine[1].equals("M")){
                String Address=GetDataFromReg(Register.REGH);
                Address=Address+GetDataFromReg(Register.REGL);
                UpdateMemoryFile(Address, Data);
            }
            else{
                InsertToReg(CheckRegister(InputCodeLine[1]), HextoBinary(Data), Data);
            }
        }
        else if(InputCodeLine[0].equals("INX")){
            String Data="";
            char[] Result="0000".toCharArray();
            if(InputCodeLine[1].equals("B")){
                Data=GetDataFromReg(Register.REGB);
                Data=Data+GetDataFromReg(Register.REGC);
            }
            else if(InputCodeLine[1].equals("D")){
                Data=GetDataFromReg(Register.REGD);
                Data=Data+GetDataFromReg(Register.REGE);
            }
            else if(InputCodeLine[1].equals("H")){
                Data=GetDataFromReg(Register.REGH);
                Data=Data+GetDataFromReg(Register.REGL);
            }
            int data=Integer.parseInt(Data,16);
            data++;
            if(data>65535)data=0;
            Data=Integer.toHexString(data).toUpperCase();
            for(int i=0;i<Data.length();i++){
                Result[3-i]=Data.charAt(Data.length()-i-1);
            }
            Data=String.valueOf(Result);
            if(InputCodeLine[1].equals("B")){
                InsertToReg(Register.REGB, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGC, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
            else if(InputCodeLine[1].equals("D")){
                InsertToReg(Register.REGD, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGE, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
            else if(InputCodeLine[1].equals("H")){
                InsertToReg(Register.REGH, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGL, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
        }
        else if(InputCodeLine[0].equals("DCX")){
            String Data="";
            char[] Result="0000".toCharArray();
            if(InputCodeLine[1].equals("B")){
                Data=GetDataFromReg(Register.REGB);
                Data=Data+GetDataFromReg(Register.REGC);
            }
            else if(InputCodeLine[1].equals("D")){
                Data=GetDataFromReg(Register.REGD);
                Data=Data+GetDataFromReg(Register.REGE);
            }
            else if(InputCodeLine[1].equals("H")){
                Data=GetDataFromReg(Register.REGH);
                Data=Data+GetDataFromReg(Register.REGL);
            }
            int data=Integer.parseInt(Data,16);
            data--;
            if(data<0)data=0;
            Data=Integer.toHexString(data).toUpperCase();
            for(int i=0;i<Data.length();i++){
                Result[3-i]=Data.charAt(Data.length()-i-1);
            }
            Data=String.valueOf(Result);
            if(InputCodeLine[1].equals("B")){
                InsertToReg(Register.REGB, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGC, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
            else if(InputCodeLine[1].equals("D")){
                InsertToReg(Register.REGD, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGE, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
            else if(InputCodeLine[1].equals("H")){
                InsertToReg(Register.REGH, HextoBinary(Data.substring(0, 2)), Data.substring(0, 2));
                InsertToReg(Register.REGL, HextoBinary(Data.substring(2, 4)), Data.substring(2, 4));
            }
        }
    }
    public void LogicalOperations(String[] InputCodeLine){
        if(InputCodeLine[0].equals("ANA")){
            String SourceReg=InputCodeLine[1];
            char[] Data;
            char[] Result=("00000000").toCharArray();
            if(SourceReg.equals("M")){
                Data=HextoBinary(GetDataFromMemoryHL());
            }
            else{
                Data=HextoBinary(GetDataFromReg(CheckRegister(SourceReg)));
            }
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]=='1'){
                    if(Data[i]=='1'){
                        Result[i]='1';
                    }
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("ANI")){
            char[] Data=HextoBinary(InputCodeLine[1]);
            char[] Result=("00000000").toCharArray();
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
             for(int i=0;i<AccData.length;i++){
                if(AccData[i]=='1'){
                    if(Data[i]=='1'){
                        Result[i]='1';
                    }
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("ORA")){
            String SourceReg=InputCodeLine[1];
            char[] Data;
            char[] Result=("00000000").toCharArray();
            if(SourceReg.equals("M")){
                Data=HextoBinary(GetDataFromMemoryHL());
            }
            else{
                Data=HextoBinary(GetDataFromReg(CheckRegister(SourceReg)));
            }
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]=='1'){
                    Result[i]='1';
                }
                else if(Data[i]=='1'){
                    Result[i]='1';
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("ORI")){
            char[] Data=HextoBinary(InputCodeLine[1]);
            char[] Result=("00000000").toCharArray();
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]=='1'){
                    Result[i]='1';
                }
                else if(Data[i]=='1'){
                    Result[i]='1';
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("CMA")){
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]=='1'){
                    AccData[i]='0';
                }
                else{
                    AccData[i]='1';
                }
            }
            InsertToReg(Register.ACC,AccData, BinToHex(AccData));
        }
        else if(InputCodeLine[0].equals("XRA")){
            String SourceReg=InputCodeLine[1];
            char[] Data;
            char[] Result=("00000000").toCharArray();
            if(SourceReg.equals("M")){
                Data=HextoBinary(GetDataFromMemoryHL());
            }
            else{
                Data=HextoBinary(GetDataFromReg(CheckRegister(SourceReg)));
            }
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]!=Data[i]){
                    Result[i]='1';
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("XRI")){
            char[] Data=HextoBinary(InputCodeLine[1]);
            char[] Result=("00000000").toCharArray();
            char[] AccData=HextoBinary(GetDataFromReg(Register.ACC));
            for(int i=0;i<AccData.length;i++){
                if(AccData[i]!=Data[i]){
                    Result[i]='1';
                }
            }
            InsertToReg(Register.ACC,Result, BinToHex(Result));
        }
        else if(InputCodeLine[0].equals("CMP")){
            DefaultTableModel FlagRegTable=(DefaultTableModel)FlagRegisterTable.getModel();
            String SourceReg=InputCodeLine[1];
            int Data;
            char[] Result=("00000000").toCharArray();
            if(SourceReg.equals("M")){
                Data=Integer.parseInt(GetDataFromMemoryHL(),16);
            }
            else{
                Data=Integer.parseInt(GetDataFromReg(CheckRegister(SourceReg)), 16);
            }
            int AccData=Integer.parseInt(GetDataFromReg(Register.ACC),16);
            if(AccData>Data){
                FlagRegTable.setValueAt(0, 0, 3);
                FlagRegTable.setValueAt(0, 0, 9);
            }
            else if(AccData==Data){
                FlagRegTable.setValueAt(1, 0, 3);
            }
            else{
                FlagRegTable.setValueAt(1, 0, 9);
            }
            for(int i=0;i<Result.length;i++){
                Result[i]=FlagRegTable.getValueAt(0, i+2).toString().charAt(0);
            }
            InsertToFlag(Result);
        }
        else if(InputCodeLine[0].equals("CPI")){
            DefaultTableModel FlagRegTable=(DefaultTableModel)FlagRegisterTable.getModel();
            char[] Result=("00000000").toCharArray();
            int Data=Integer.parseInt(InputCodeLine[1], 16);
            int AccData=Integer.parseInt(GetDataFromReg(Register.ACC),16);
            if(AccData>Data){
                FlagRegTable.setValueAt('0', 0, 3);
                FlagRegTable.setValueAt('0', 0, 9);
            }
            else if(AccData==Data){
                FlagRegTable.setValueAt('1', 0, 3);
            }
            else{
                FlagRegTable.setValueAt('1', 0, 9);
            }
            for(int i=0;i<Result.length;i++){
                Result[i]=FlagRegTable.getValueAt(0, i+2).toString().charAt(0);
            }
            InsertToFlag(Result);
        }
        else if(InputCodeLine[0].equals("CMC")){
            char[] Result=("00000000").toCharArray();
            DefaultTableModel FlagRegTable=(DefaultTableModel)FlagRegisterTable.getModel();
            char cy=FlagRegTable.getValueAt(0, 9).toString().charAt(0);
            if(cy=='1'){
                FlagRegTable.setValueAt('0', 0, 9);
            }
            else{
                FlagRegTable.setValueAt('1', 0, 9);
            }
            for(int i=0;i<Result.length;i++){
                Result[i]=FlagRegTable.getValueAt(0, i+2).toString().charAt(0);
            }
            InsertToFlag(Result);
        }
        else if(InputCodeLine[0].equals("STC")){
            char[] Result=("00000000").toCharArray();
            DefaultTableModel FlagRegTable=(DefaultTableModel)FlagRegisterTable.getModel();
            FlagRegTable.setValueAt('1', 0, 9);
            for(int i=0;i<Result.length;i++){
                Result[i]=FlagRegTable.getValueAt(0, i+2).toString().charAt(0);
            }
            InsertToFlag(Result);
        }
    }
    public void InsertToFlag(char[] flagData){
        try{
            DefaultTableModel FlagRegTable=(DefaultTableModel)FlagRegisterTable.getModel();
            for(int i=0;i<flagData.length;i++){
                FlagRegTable.setValueAt(flagData[i], 0, i+2);
                }
            FlagRegTable.setValueAt(Integer.toHexString(Integer.parseInt(String.valueOf(flagData),2)), 0, 1);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,"from flag "+e);
        }
    }
    public String GetDataFromMemoryHL(){
        String Address=GetDataFromReg(Register.REGH)+GetDataFromReg(Register.REGL);
        String Data=SearchInMemory(Address);
        return Data;
    }
    public String BinToHex(char[] bin){
        String binno=String.valueOf(bin);
        String hex=Integer.toHexString(Integer.parseInt(binno, 2));
        return hex.toUpperCase();
    }
    public int BranchOperations(String[] InputCodeLine,int j){
        int jmp_address=0;
        try{
            boolean labelAddressFlag=false;
            DefaultTableModel FlagTable=(DefaultTableModel)FlagRegisterTable.getModel();
            if(InputCodeLine[0].equals("JMP")){
                labelAddressFlag=true;
            }
            else if(InputCodeLine[0].equals("JC")){
                char cy=FlagTable.getValueAt(0, 9).toString().charAt(0);
                if(cy=='1'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JNC")){
                char cy=FlagTable.getValueAt(0, 9).toString().charAt(0);
                if(cy=='0'){
                    labelAddressFlag=true;
                    JOptionPane.showMessageDialog(this, "Hi");
                }
            }
            else if(InputCodeLine[0].equals("JP")){
                char s=FlagTable.getValueAt(0, 2).toString().charAt(0);
                if(s=='0'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JM")){
                char s=FlagTable.getValueAt(0, 2).toString().charAt(0);
                if(s=='1'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JZ")){
                char zero=FlagTable.getValueAt(0, 3).toString().charAt(0);
                if(zero=='1'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JNZ")){
                char zero=FlagTable.getValueAt(0, 3).toString().charAt(0);
                if(zero=='0'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JPE")){
                char pe=FlagTable.getValueAt(0, 7).toString().charAt(0);
                if(pe=='1'){
                    labelAddressFlag=true;
                }
            }
            else if(InputCodeLine[0].equals("JPO")){
                char pe=FlagTable.getValueAt(0, 7).toString().charAt(0);
                if(pe=='0'){
                    labelAddressFlag=true;
                }
            }
            if(labelAddressFlag){
                for(int i=0;i<LabelAddress.length;i++){
                    if(InputCodeLine[1].equals(LabelAddress[i][0])){
                        jmp_address=Integer.parseInt(LabelAddress[i][1]);
                        break;
                    }
                }
                return jmp_address;
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,"From Branch "+ e);
        }
        return j;
    }
public enum Register{ACC,REGB,REGC,REGD,REGE,REGH,REGL,REGFLAG,MEMORY}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CompileButton;
    private javax.swing.JButton ConvertNoButton;
    private javax.swing.JTable ConverterTable;
    private javax.swing.JTextPane Editor;
    private javax.swing.JTable FlagRegisterTable;
    private javax.swing.JTable MemoryTable;
    private javax.swing.JMenuItem Menu_Exit;
    private javax.swing.JMenuItem Menu_New;
    private javax.swing.JMenuItem Menu_Save;
    private javax.swing.JRadioButton RButtonAll;
    private javax.swing.JRadioButton RButtonOne;
    private javax.swing.JTable RegisterTable;
    private javax.swing.JButton RunButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame5;
    private javax.swing.JInternalFrame jInternalFrame6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables

}
